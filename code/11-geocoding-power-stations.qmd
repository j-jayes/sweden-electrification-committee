---
title: "Geocoding power stations"
format: html
---

## Purpose

Geocoding the power stations

```{r}
library(tidyverse)
```

### Column names

```{r}
names <- tibble::tibble(
               column = c(1L,2L,3L,4L,5L,6L,
                          7L,8L,9L,10L,11L,12L,13L,14L,15L,16L,17L,18L,
                          19L,20L,21L),
        swedish_title = c("Nummer",
                          "Företagets namn","Kommun, stad","Kraftstationenes namn eller läge",
                          "Drivkraft","Utbyggd fallhöjd i m",
                          "Installerad generatoreffekt i kVA","Strömart","Periodtal",
                          "Spänningssysstem volt","Huvudtransformatorns effeckt kVA",
                          "Ortstransformatorernas antal",
                          "Ortstransformatorernas sammanlagda effekt kVA",
                          "Anslutning år 1922 motorer kW","belysning kW","övriga apparater kW",
                          "summa kW","Energiförbrukning år 1922 kWh",
                          "Elektriferad åkerareal den 1/1 1923 hektar","Anmärkningar","Nummer"),
        english_title = c("Number",
                          "The name of the company","Municipality, city",
                          "The name or mode of power station","Driving force",
                          "Expanded fall height in m","Installed generator power in KVA",
                          "Streaming","Period number","Voltage voltage",
                          "The effect of the main transformer",
                          "The number of local transformers","The total effect of the local transformers",
                          "Connection in 1922 engines KW","Lighting kw",
                          "Other appliances kW","Sum kw",
                          "Energy consumption in 1922 kWh","Electrified arable land on 1/1 1923 hectares",
                          "Notes","Number")
   )

names_blekinge <- tibble(
  column = c(
    1L, 2L, 3L, 4L, 5L, 6L,
    7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L,
    19L, 20L, 21L, 22L
  ),
  swedish_title = c(
    "Anlägningens.nr.å.karten", "Socken eller landskommun (stad)",
    "Anlägningens namn", 
    "geocode_key",
    "coords_manual",
    "ägare",
    "Energien erhålles från egen kraftstation av följande typ och storlek, medelst abonnement fran nedanståene företag. Kraftmaskiner system",
    "Sammanlegd effekt hkr", "Utbyggd fallhöjd",
    "Strömart och periodtal", "Spänning volt",
    "Sammanlegd effekt kVA", "Alstrad energi kWh",
    "Sammanlegd primar transformator effekt kVA", "Distributionsledningar Klass",
    "Distributionsledningar spänning volt",
    "Sammanlagd längd km",
    "Sammanlagd sekundär transformatoreffekt excl abonnenternas egna transformatorer",
    "Sammanlagd anslutning av motorer, lampor",
    "Sammanlagd komsumtion inkl förluster",
    "Elektrifierad areal odlad jord med blott belysning",
    "Elektrifierad areal odlad jord total"
  ),
  english_title = c(
    "Number on the map", "Parish or rural municipality (city)",
    "The name of the plant", 
        "geocode_key",
    "coords_manual",
    "owner",
    "The energy is obtained from its own power station of the following type and size, by subscription from the below companies. Power machines systems", "Confidential effect HKR",
    "Expanded fall height",
    "Streaming and period number", "Tension volts",
    "Confidential effect kVA", "Generated energy kwh",
    "Confederate Primar Transformer Power KVA",
    "Distribution lines class",
    "Distribution lines voltage volts", "Total length km",
    "Total secondary transformer power EXCL Subscribers' own transformers",
    "Total connection of engines, lamps",
    "Total comsumtion including losses",
    "Electrified area cultivated soil with only lighting",
    "Electrified area cultivated soil total"
  )
)

```

### Geocoding

```{r}
df_gotland <- readxl::read_excel("data/Gotland_power_stations.xlsx") %>% 
  janitor::clean_names()

df_gotland <- df_gotland %>% 
  mutate(geocode_key = str_squish(str_remove(kraftstationenes_namn_eller_lage, " .*")),
         geocode_str = str_c(geocode_key, ", Gotland, Sweden"))
```

```{r}
library(tidygeocoder)

geocode_gotland <- geocode(df_gotland, address = geocode_str, lat = "lat_osm", long = "long_osm")

geocode_gotland %>% 
  filter(is.na(lat_osm)) %>% 
  select(geocode_key)
```

Vallviks cementfabrik is at Valleviken when you look on the map.

```{r}
# from google maps
geocode_gotland <- geocode_gotland %>% 
  mutate(lat_manual = case_when(
    geocode_key == "Vallvik" ~ 57.79199319084988,
    TRUE ~ NA_real_
  ),
  long_manual = case_when(
    geocode_key == "Vallvik" ~ 18.938451110308755,
    TRUE ~ NA_real_
  ))

geocode_gotland <- geocode_gotland %>% 
  mutate(lat = case_when(
    !is.na(lat_osm) ~ lat_osm,
    is.na(lat_osm) ~ lat_manual,
    is.na(lat_osm) & is.na(lat_manual) ~ NA_real_
  ),
  long = case_when(
    !is.na(long_osm) ~ long_osm,
    is.na(long_osm) ~ long_manual,
    is.na(long_osm) & is.na(long_manual) ~ NA_real_
  ))
```

Join together geocode and data

```{r}
df_gotland <- readxl::read_excel("data/Gotland_power_stations.xlsx") %>% 
  janitor::clean_names()

df_gotland <- df_gotland %>% 
  mutate(geocode_key = str_squish(str_remove(kraftstationenes_namn_eller_lage, " .*")),
         geocode_str = str_c(geocode_key, ", Gotland, Sweden"))

geocode_gotland %>% 
  select(geocode_key, long, lat)
```


### Blekinge

```{r}
# df <- read_excel("ingest/blekinge_clean.xlsx")
drive_files <- googledrive::drive_find(n_max = 10)

googledrive::drive_download("Blekinge_power stations", type = "csv", path = "drive/Blekinge_power stations.csv", overwrite = TRUE)

df <- read.csv("drive/Blekinge_power stations.csv")

colnames(df) <- names_blekinge$english_title

df <- df %>% 
  janitor::clean_names()

df <- df %>%
  separate(coords_manual, 
           into = c("lat_manual", "long_manual"), 
           sep = ",", 
           convert = TRUE)

df <- df %>% 
  mutate(geocode_str = str_c(geocode_key, ", Blekinge, Sweden"))

geocode_blekinge <- geocode(df, address = geocode_str, lat = "lat_osm", long = "long_osm")

geocode_blekinge <- geocode_blekinge %>% 
  mutate(lat = case_when(
    !is.na(lat_osm) ~ lat_osm,
    is.na(lat_osm) ~ lat_manual,
    is.na(lat_osm) & is.na(lat_manual) ~ NA_real_
  ),
  long = case_when(
    !is.na(long_osm) ~ long_osm,
    is.na(long_osm) ~ long_manual,
    is.na(long_osm) & is.na(long_manual) ~ NA_real_
  ))

# geocode_blekinge %>% 
#   select(geocode_key, lat, long) %>% 
#   write_rds("geocode/blekinge.rds")

geocode_blekinge <- read_rds("geocode/blekinge.rds")

df <- df %>% 
  left_join(geocode_blekinge, by = c("geocode_key"))

df <- df %>% 
  as_tibble()

df %>% write_rds("ingest/blekinge_geocoded.rds")
```

### Uppsala

```{r}
df <- read_excel("ingest/uppsala_clean.xlsx")

# create manual lookup columns
df <- df %>%
  separate(coords_manual, 
           into = c("lat_manual", "long_manual"), 
           sep = ",", 
           convert = TRUE)

df <- df %>% 
  mutate(geocode_str = str_c(geocode_key, ", Uppsala, Sweden"))

library(tidygeocoder)

geocode_uppsala <- geocode(df, address = geocode_str, lat = "lat_osm", long = "long_osm")
```


```{r}
geocode_uppsala %>% 
  select(contains("long")) %>% view()

geocode_uppsala %>%
  ggplot(aes(long_osm, lat_osm, label = geocode_key)) +
  geom_point() +
  geom_label()
```

### Process

Basically I need to do a few things to get the geocoding down.

First I need to create a key - to look back to with the codes.

Then I need to do the geocoding with excel, because it will cut down on the time

Then I use tidygeocoder.

If they agree - we choose it.

If they disagree - we make a flag.

If neither return a result - we make a flag.

This will be done in the future, for now we want to have some results just for Uppsala.

It seems that the OSM lookup is way better than the one from Bing...

```{r}
geocode_uppsala <- geocode_uppsala %>% 
  mutate(lat = case_when(
    !is.na(lat_osm) ~ lat_osm,
    is.na(lat_osm) ~ lat_manual,
    is.na(lat_osm) & is.na(lat_manual) ~ NA_real_
  ),
  long = case_when(
    !is.na(long_osm) ~ long_osm,
    is.na(long_osm) ~ long_manual,
    is.na(long_osm) & is.na(long_manual) ~ NA_real_
  ))

geocode_uppsala <- geocode_uppsala %>% 
  select(geocode_key, long, lat)

# geocode_uppsala %>% write_rds("geocode/uppsala.rds")

df <- read_excel("ingest/uppsala_clean.xlsx")

df <- df %>% 
  select(!contains(c("long", "lat"))) %>% 
  select(!geocode)

df <- df %>% 
  left_join(geocode_uppsala) %>% 
  distinct()

# df %>% write_rds("ingest/uppsala_geocoded.rds")
```

